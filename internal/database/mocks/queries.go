// Code generated by MockGen. DO NOT EDIT.
// Source: sushi-mart/internal/database (interfaces: Querier)

// Package mock_queries is a generated GoMock package.
package mock_queries

import (
	context "context"
	reflect "reflect"
	database "sushi-mart/internal/database"

	gomock "github.com/golang/mock/gomock"
	pgtype "github.com/jackc/pgx/v5/pgtype"
)

// MockQuerier is a mock of Querier interface.
type MockQuerier struct {
	ctrl     *gomock.Controller
	recorder *MockQuerierMockRecorder
}

// MockQuerierMockRecorder is the mock recorder for MockQuerier.
type MockQuerierMockRecorder struct {
	mock *MockQuerier
}

// NewMockQuerier creates a new mock instance.
func NewMockQuerier(ctrl *gomock.Controller) *MockQuerier {
	mock := &MockQuerier{ctrl: ctrl}
	mock.recorder = &MockQuerierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuerier) EXPECT() *MockQuerierMockRecorder {
	return m.recorder
}

// AddProduct mocks base method.
func (m *MockQuerier) AddProduct(arg0 context.Context, arg1 database.AddProductParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddProduct", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddProduct indicates an expected call of AddProduct.
func (mr *MockQuerierMockRecorder) AddProduct(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddProduct", reflect.TypeOf((*MockQuerier)(nil).AddProduct), arg0, arg1)
}

// AddReview mocks base method.
func (m *MockQuerier) AddReview(arg0 context.Context, arg1 database.AddReviewParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddReview", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddReview indicates an expected call of AddReview.
func (mr *MockQuerierMockRecorder) AddReview(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddReview", reflect.TypeOf((*MockQuerier)(nil).AddReview), arg0, arg1)
}

// CancelOrder mocks base method.
func (m *MockQuerier) CancelOrder(arg0 context.Context, arg1 database.CancelOrderParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelOrder", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelOrder indicates an expected call of CancelOrder.
func (mr *MockQuerierMockRecorder) CancelOrder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelOrder", reflect.TypeOf((*MockQuerier)(nil).CancelOrder), arg0, arg1)
}

// CreateCustomer mocks base method.
func (m *MockQuerier) CreateCustomer(arg0 context.Context, arg1 database.CreateCustomerParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCustomer", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCustomer indicates an expected call of CreateCustomer.
func (mr *MockQuerierMockRecorder) CreateCustomer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCustomer", reflect.TypeOf((*MockQuerier)(nil).CreateCustomer), arg0, arg1)
}

// CreateWallet mocks base method.
func (m *MockQuerier) CreateWallet(arg0 context.Context, arg1 database.CreateWalletParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWallet", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateWallet indicates an expected call of CreateWallet.
func (mr *MockQuerierMockRecorder) CreateWallet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWallet", reflect.TypeOf((*MockQuerier)(nil).CreateWallet), arg0, arg1)
}

// DeletProduct mocks base method.
func (m *MockQuerier) DeletProduct(arg0 context.Context, arg1 database.DeletProductParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletProduct", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletProduct indicates an expected call of DeletProduct.
func (mr *MockQuerierMockRecorder) DeletProduct(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletProduct", reflect.TypeOf((*MockQuerier)(nil).DeletProduct), arg0, arg1)
}

// DeliverOrder mocks base method.
func (m *MockQuerier) DeliverOrder(arg0 context.Context, arg1 database.DeliverOrderParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeliverOrder", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeliverOrder indicates an expected call of DeliverOrder.
func (mr *MockQuerierMockRecorder) DeliverOrder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeliverOrder", reflect.TypeOf((*MockQuerier)(nil).DeliverOrder), arg0, arg1)
}

// GetAllPlacedOrders mocks base method.
func (m *MockQuerier) GetAllPlacedOrders(arg0 context.Context, arg1 int32) ([]database.GetAllPlacedOrdersRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPlacedOrders", arg0, arg1)
	ret0, _ := ret[0].([]database.GetAllPlacedOrdersRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllPlacedOrders indicates an expected call of GetAllPlacedOrders.
func (mr *MockQuerierMockRecorder) GetAllPlacedOrders(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPlacedOrders", reflect.TypeOf((*MockQuerier)(nil).GetAllPlacedOrders), arg0, arg1)
}

// GetAllProducts mocks base method.
func (m *MockQuerier) GetAllProducts(arg0 context.Context) ([]database.Productitem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllProducts", arg0)
	ret0, _ := ret[0].([]database.Productitem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllProducts indicates an expected call of GetAllProducts.
func (mr *MockQuerierMockRecorder) GetAllProducts(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllProducts", reflect.TypeOf((*MockQuerier)(nil).GetAllProducts), arg0)
}

// GetAvgCustomerRatings mocks base method.
func (m *MockQuerier) GetAvgCustomerRatings(arg0 context.Context) ([]database.GetAvgCustomerRatingsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAvgCustomerRatings", arg0)
	ret0, _ := ret[0].([]database.GetAvgCustomerRatingsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAvgCustomerRatings indicates an expected call of GetAvgCustomerRatings.
func (mr *MockQuerierMockRecorder) GetAvgCustomerRatings(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAvgCustomerRatings", reflect.TypeOf((*MockQuerier)(nil).GetAvgCustomerRatings), arg0)
}

// GetCustomer mocks base method.
func (m *MockQuerier) GetCustomer(arg0 context.Context, arg1 string) (database.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomer", arg0, arg1)
	ret0, _ := ret[0].(database.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomer indicates an expected call of GetCustomer.
func (mr *MockQuerierMockRecorder) GetCustomer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomer", reflect.TypeOf((*MockQuerier)(nil).GetCustomer), arg0, arg1)
}

// GetMostOrdersPlaced mocks base method.
func (m *MockQuerier) GetMostOrdersPlaced(arg0 context.Context) ([]database.GetMostOrdersPlacedRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMostOrdersPlaced", arg0)
	ret0, _ := ret[0].([]database.GetMostOrdersPlacedRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMostOrdersPlaced indicates an expected call of GetMostOrdersPlaced.
func (mr *MockQuerierMockRecorder) GetMostOrdersPlaced(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMostOrdersPlaced", reflect.TypeOf((*MockQuerier)(nil).GetMostOrdersPlaced), arg0)
}

// GetProductItem mocks base method.
func (m *MockQuerier) GetProductItem(arg0 context.Context, arg1 int32) (database.Productitem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductItem", arg0, arg1)
	ret0, _ := ret[0].(database.Productitem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductItem indicates an expected call of GetProductItem.
func (mr *MockQuerierMockRecorder) GetProductItem(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductItem", reflect.TypeOf((*MockQuerier)(nil).GetProductItem), arg0, arg1)
}

// GetWallet mocks base method.
func (m *MockQuerier) GetWallet(arg0 context.Context, arg1 int32) (database.GetWalletRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWallet", arg0, arg1)
	ret0, _ := ret[0].(database.GetWalletRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWallet indicates an expected call of GetWallet.
func (mr *MockQuerierMockRecorder) GetWallet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWallet", reflect.TypeOf((*MockQuerier)(nil).GetWallet), arg0, arg1)
}

// PlaceOrder mocks base method.
func (m *MockQuerier) PlaceOrder(arg0 context.Context, arg1 database.PlaceOrderParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PlaceOrder", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PlaceOrder indicates an expected call of PlaceOrder.
func (mr *MockQuerierMockRecorder) PlaceOrder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PlaceOrder", reflect.TypeOf((*MockQuerier)(nil).PlaceOrder), arg0, arg1)
}

// UpdateBalance mocks base method.
func (m *MockQuerier) UpdateBalance(arg0 context.Context, arg1 database.UpdateBalanceParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBalance", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBalance indicates an expected call of UpdateBalance.
func (mr *MockQuerierMockRecorder) UpdateBalance(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBalance", reflect.TypeOf((*MockQuerier)(nil).UpdateBalance), arg0, arg1)
}

// UpdateProduct mocks base method.
func (m *MockQuerier) UpdateProduct(arg0 context.Context, arg1 database.UpdateProductParams) (database.Productitem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProduct", arg0, arg1)
	ret0, _ := ret[0].(database.Productitem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProduct indicates an expected call of UpdateProduct.
func (mr *MockQuerierMockRecorder) UpdateProduct(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProduct", reflect.TypeOf((*MockQuerier)(nil).UpdateProduct), arg0, arg1)
}

// ValidateProductOrderReview mocks base method.
func (m *MockQuerier) ValidateProductOrderReview(arg0 context.Context, arg1 pgtype.Int4) (database.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateProductOrderReview", arg0, arg1)
	ret0, _ := ret[0].(database.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateProductOrderReview indicates an expected call of ValidateProductOrderReview.
func (mr *MockQuerierMockRecorder) ValidateProductOrderReview(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateProductOrderReview", reflect.TypeOf((*MockQuerier)(nil).ValidateProductOrderReview), arg0, arg1)
}
